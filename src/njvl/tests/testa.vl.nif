(stmts
 (proc :echo.0 . . .
  (params
   (param :cond.0 . .
    (bool) .)) . . .
  (stmts
   (stmts
    (cfvar :´r.0))))
 (proc :echo.1 . . .
  (params
   (param :cond.0 . .
    (bool) .))
  (i +32) . .
  (stmts
   (stmts
    (cfvar :´r.0))))
 (let :a.0 . .
  (bool)
  (false))
 (var :b.0 . .
  (bool)
  (true))
 (cfvar :`j.0.main)
 (ite
  (v a.0 +0)
  (stmts
   (jtrue `j.0.main))
  (stmts
   (ite
    (v b.0 +0)
    (stmts
     (jtrue `j.0.main)) .
    (stmts)))
  (stmts))
 (ite `j.0.main
  (stmts
   (call echo.0 "abc")) .
  (stmts))
 (store
  (false)
  (v b.0 +1))
 (loop
  (stmts
   (cfvar :´g.0))
  (not ´g.0)
  (stmts
   (call echo.0 "pre-condition")
   (ite
    (v a.0 +0)
    (stmts
     (ite
      (v b.0 +1)
      (stmts
       (jtrue ´g.0))
      (stmts
       (ite
        (not ´g.0)
        (stmts
         (call echo.0 "more")) .
        (stmts)))
      (stmts))) .
    (stmts))
   (ite
    (not ´g.0)
    (stmts
     (call echo.0 "code here")) .
    (stmts))
   (continue .)
   (continue)))
 (call echo.0 "after loop")
 (let :`x.1 . .
  (i +32)
  (call echo.1 "abc"))
 (call echo.0
  (v `x.1 +0))
 (kill a.0 b.0 `x.1))