# Generated by tools/gen_tags.nim from doc/tags.md. DO NOT EDIT!

type
  NifcExpr* = enum
    NoNifcExpr
    ErrC = (2, "err")  ## indicates an error
    SufC = (3, "suf")  ## literal with suffix annotation
    AtC = (4, "at")  ## array indexing operation
    DerefC = (5, "deref")  ## pointer deref operation
    DotC = (6, "dot")  ## object field selection
    PatC = (7, "pat")  ## pointer indexing operation
    ParC = (8, "par")  ## syntactic parenthesis
    AddrC = (9, "addr")  ## address of operation
    NilC = (10, "nil")  ## nil pointer value
    InfC = (11, "inf")  ## positive infinity floating point value
    NeginfC = (12, "neginf")  ## negative infinity floating point value
    NanC = (13, "nan")  ## NaN floating point value
    FalseC = (14, "false")  ## boolean `false` value
    TrueC = (15, "true")  ## boolean `true` value
    AndC = (16, "and")  ## boolean `and` operation
    OrC = (17, "or")  ## boolean `or` operation
    NotC = (18, "not")  ## boolean `not` operation
    NegC = (19, "neg")  ## negation operation
    SizeofC = (20, "sizeof")  ## `sizeof` operation
    AlignofC = (21, "alignof")  ## `alignof` operation
    OffsetofC = (22, "offsetof")  ## `offsetof` operation
    OconstrC = (23, "oconstr")  ## object constructor
    AconstrC = (24, "aconstr")  ## array constructor
    AddC = (26, "add")  ## 
    SubC = (27, "sub")  ## 
    MulC = (28, "mul")  ## 
    DivC = (29, "div")  ## 
    ModC = (30, "mod")  ## 
    ShrC = (31, "shr")  ## 
    ShlC = (32, "shl")  ## 
    BitandC = (33, "bitand")  ## 
    BitorC = (34, "bitor")  ## 
    BitxorC = (35, "bitxor")  ## 
    BitnotC = (36, "bitnot")  ## 
    EqC = (37, "eq")  ## 
    NeqC = (38, "neq")  ## 
    LeC = (39, "le")  ## 
    LtC = (40, "lt")  ## 
    CastC = (41, "cast")  ## 
    ConvC = (42, "conv")  ## type conversion
    CallC = (43, "call")  ## call operation
  NifcStmt* = enum
    NoNifcStmt
    GvarS = (46, "gvar")  ## global variable declaration
    TvarS = (47, "tvar")  ## thread local variable declaration
    VarS = (48, "var")  ## variable declaration
    ConstS = (50, "const")  ## const variable declaration
    EmitS = (54, "emit")  ## emit statement
    AsgnS = (55, "asgn")  ## assignment statement
    ScopeS = (56, "scope")  ## explicit scope annotation, like `stmts`
    IfS = (57, "if")  ## if statement header
    BreakS = (60, "break")  ## `break` statement
    WhileS = (61, "while")  ## `while` statement
    CaseS = (62, "case")  ## `case` statement
    LabS = (64, "lab")  ## label, target of a `jmp` instruction
    JmpS = (65, "jmp")  ## jump/goto instruction
    RetS = (66, "ret")  ## `return` instruction
    StmtsS = (67, "stmts")  ## list of statements
    ProcS = (69, "proc")  ## proc declaration
    TypeS = (89, "type")  ## `type` declaration statement
    ImpS = (108, "imp")  ## import declaration
    InclS = (110, "incl")  ## `#include` statement
    DiscardS = (111, "discard")  ## `discard` statement
    TryS = (112, "try")  ## `try` statement
    RaiseS = (113, "raise")  ## `raise` statement
    OnerrS = (114, "onerr")  ## error handling statement
  NifcType* = enum
    NoNifcType
    ParamsT = (68, "params")  ## list of proc parameters, also used as a "proc type"
    UnionT = (71, "union")  ## union declaration
    ObjectT = (72, "object")  ## object type declaration
    EnumT = (74, "enum")  ## enum type declaration
    ProctypeT = (75, "proctype")  ## proc type declaration (soon obsolete, use params instead)
    IT = (79, "i")  ## `int` builtin type
    UT = (80, "u")  ## `uint` builtin type
    FT = (81, "f")  ## `float` builtin type
    CT = (82, "c")  ## `char` builtin type
    BoolT = (83, "bool")  ## `bool` builtin type
    VoidT = (84, "void")  ## `void` return type
    PtrT = (85, "ptr")  ## `ptr` type contructor
    ArrayT = (86, "array")  ## `array` type constructor
    FlexarrayT = (87, "flexarray")  ## `flexarray` type constructor
    AptrT = (88, "aptr")  ## "pointer to array of" type constructor
  NifcOther* = enum
    NoNifcSubstructure
    KvU = (25, "kv")  ## key-value pair
    RangeU = (44, "range")  ## `(range a b)` construct
    RangesU = (45, "ranges")  ## 
    ParamU = (49, "param")  ## parameter declaration
    ElifU = (58, "elif")  ## pair of (condition, action)
    ElseU = (59, "else")  ## `else` action
    OfU = (63, "of")  ## `of` branch within a `case` statement
    FldU = (70, "fld")  ## field declaration
    EfldU = (73, "efld")  ## enum field declaration
    AttrU = (100, "attr")  ## general attribute annoation
    PragmasU = (104, "pragmas")  ## begin of pragma section
  NifcPragma* = enum
    NoNifcPragma
    InlineP = (98, "inline")  ## `inline` proc annotation
    NoinlineP = (99, "noinline")  ## `noinline` proc annotation
    VarargsP = (101, "varargs")  ## `varargs` proc annotation
    WasP = (102, "was")  ## 
    SelectanyP = (103, "selectany")  ## 
    AlignP = (105, "align")  ## 
    BitsP = (106, "bits")  ## 
    VectorP = (107, "vector")  ## 
    NodeclP = (109, "nodecl")  ## `nodecl` annotation
    RaisesP = (115, "raises")  ## proc annotation
    ErrsP = (116, "errs")  ## proc annotation
    StaticP = (117, "static")  ## `static` annotation
  NifcTypeQualifier* = enum
    NoQualifier
    AtomicQ = (76, "atomic")  ## `atomic` type qualifier for NIFC
    RoQ = (77, "ro")  ## `readonly` (= `const`) type qualifier for NIFC
    RestrictQ = (78, "restrict")  ## type qualifier for NIFC
