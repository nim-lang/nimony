# Generated by tools/gen_tags.nim from doc/tags.md. DO NOT EDIT!


type
  NiflerKind* = enum
    None
    ErrL = (1, "err")  ## indicates an error
    SufL = (2, "suf")  ## literal with suffix annotation
    AtL = (3, "at")  ## array indexing operation
    DerefL = (4, "deref")  ## pointer deref operation
    DotL = (5, "dot")  ## object field selection
    ParL = (7, "par")  ## syntactic parenthesis
    AddrL = (8, "addr")  ## address of operation
    NilL = (9, "nil")  ## nil pointer value
    OconstrL = (22, "oconstr")  ## object constructor
    BracketL = (24, "bracket")  ## untyped array constructor
    CurlyL = (25, "curly")  ## untyped set constructor
    CurlyatL = (26, "curlyat")  ## curly expression `a{i}`
    KvL = (27, "kv")  ## key-value pair
    VvL = (28, "vv")  ## value-value pair (used for explicitly named arguments in function calls)
    CastL = (44, "cast")  ## `cast` operation
    CallL = (46, "call")  ## call operation
    CmdL = (47, "cmd")  ## command operation
    RangesL = (49, "ranges")
    VarL = (52, "var")  ## variable declaration
    ParamL = (53, "param")  ## parameter declaration
    ConstL = (54, "const")  ## const variable declaration
    LetL = (56, "let")  ## let variable declaration
    TypevarL = (58, "typevar")  ## type variable declaration
    EfldL = (59, "efld")  ## enum field declaration
    FldL = (60, "fld")  ## field declaration
    ProcL = (61, "proc")  ## proc declaration
    FuncL = (62, "func")  ## function declaration
    IteratorL = (63, "iterator")  ## iterator declaration
    ConverterL = (64, "converter")  ## converter declaration
    MethodL = (65, "method")  ## method declaration
    MacroL = (66, "macro")  ## macro declaration
    TemplateL = (67, "template")  ## template declaration
    TypeL = (68, "type")  ## type declaration
    BlockL = (69, "block")  ## block declaration
    AsgnL = (74, "asgn")  ## assignment statement
    IfL = (76, "if")  ## if statement header
    WhenL = (77, "when")  ## when statement header
    ElifL = (78, "elif")  ## pair of (condition, action)
    ElseL = (79, "else")  ## `else` action
    TypevarsL = (80, "typevars")  ## type variable/generic parameters
    BreakL = (81, "break")  ## `break` statement
    ContinueL = (82, "continue")  ## `continue` statement
    ForL = (83, "for")  ## for statement
    WhileL = (84, "while")  ## `while` statement
    CaseL = (85, "case")  ## `case` statement
    OfL = (86, "of")  ## `of` branch within a `case` statement
    RetL = (89, "ret")  ## `return` instruction
    YldL = (90, "yld")  ## yield statement
    StmtsL = (91, "stmts")  ## list of statements
    ParamsL = (92, "params")  ## list of proc parameters, also used as a "proc type"
    ObjectL = (94, "object")  ## object type declaration
    EnumL = (95, "enum")  ## enum type declaration
    ProctypeL = (96, "proctype")  ## proc type declaration (soon obsolete, use params instead)
    PtrL = (107, "ptr")  ## `ptr` type contructor
    PragmasL = (126, "pragmas")  ## begin of pragma section
    PragmaxL = (127, "pragmax")  ## pragma expressions
    IncludeL = (135, "include")  ## `include` statement
    ImportL = (136, "import")  ## `import` statement
    ImportasL = (137, "importas")  ## `import as` statement
    FromL = (138, "from")  ## `from` statement
    ImportexceptL = (139, "importexcept")  ## `importexcept` statement
    ExportL = (140, "export")  ## `export` statement
    ExportexceptL = (141, "exportexcept")  ## `exportexcept` statement
    CommentL = (142, "comment")  ## `comment` statement
    DiscardL = (143, "discard")  ## `discard` statement
    TryL = (144, "try")  ## `try` statement
    RaiseL = (145, "raise")  ## `raise` statement
    StaticL = (149, "static")  ## `static` type or annotation
    UnpackflatL = (154, "unpackflat")  ## unpack into flat variable list
    UnpacktupL = (155, "unpacktup")  ## unpack tuple
    UnpackdeclL = (156, "unpackdecl")  ## unpack var/let/const declaration
    ExceptL = (157, "except")  ## except subsection
    FinL = (158, "fin")  ## finally subsection
    RefobjL = (159, "refobj")  ## `ref object` type
    PtrobjL = (160, "ptrobj")  ## `ptr object` type
    TupleL = (161, "tuple")  ## `tuple` type
    RefL = (163, "ref")  ## `ref` type
    MutL = (164, "mut")  ## `mut` type
    OutL = (165, "out")  ## `out` type
    ConceptL = (169, "concept")  ## `concept` type
    DistinctL = (170, "distinct")  ## `distinct` type
    ItertypeL = (171, "itertype")  ## `itertype` type
    QuotedL = (205, "quoted")  ## name in backticks
    TupL = (210, "tup")  ## tuple constructor
    TabconstrL = (212, "tabconstr")  ## table constructor
    CallstrlitL = (217, "callstrlit")
    InfixL = (218, "infix")
    PrefixL = (219, "prefix")
    TypeofL = (226, "typeof")
    ExprL = (232, "expr")
    DoL = (233, "do")  ## `do` expression
    StaticstmtL = (253, "staticstmt")  ## `static` statement
    BindL = (254, "bind")  ## `bind` statement
    MixinL = (255, "mixin")  ## `mixin` statement
    UsingL = (256, "using")  ## `using` statement
    AsmL = (257, "asm")  ## `asm` statement
    DeferL = (258, "defer")  ## `defer` statement
