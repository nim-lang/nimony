# Generated by tools/gen_tags.nim from doc/tags.md. DO NOT EDIT!

type
  NimonyExpr* = enum
    NoExpr
    ErrX = (2, "err")  ## indicates an error
    SufX = (3, "suf")  ## literal with suffix annotation
    AtX = (4, "at")  ## array indexing operation
    DerefX = (5, "deref")  ## pointer deref operation
    DotX = (6, "dot")  ## object field selection
    PatX = (7, "pat")  ## pointer indexing operation
    ParX = (8, "par")  ## syntactic parenthesis
    AddrX = (9, "addr")  ## address of operation
    NilX = (10, "nil")  ## nil pointer value
    InfX = (11, "inf")  ## positive infinity floating point value
    NeginfX = (12, "neginf")  ## negative infinity floating point value
    NanX = (13, "nan")  ## NaN floating point value
    FalseX = (14, "false")  ## boolean `false` value
    TrueX = (15, "true")  ## boolean `true` value
    AndX = (16, "and")  ## boolean `and` operation
    OrX = (17, "or")  ## boolean `or` operation
    NotX = (18, "not")  ## boolean `not` operation
    NegX = (19, "neg")  ## negation operation
    SizeofX = (20, "sizeof")  ## `sizeof` operation
    AlignofX = (21, "alignof")  ## `alignof` operation
    OffsetofX = (22, "offsetof")  ## `offsetof` operation
    OconstrX = (23, "oconstr")  ## object constructor
    AconstrX = (24, "aconstr")  ## array constructor
    AddX = (26, "add")  ## 
    SubX = (27, "sub")  ## 
    MulX = (28, "mul")  ## 
    DivX = (29, "div")  ## 
    ModX = (30, "mod")  ## 
    ShrX = (31, "shr")  ## 
    ShlX = (32, "shl")  ## 
    BitandX = (33, "bitand")  ## 
    BitorX = (34, "bitor")  ## 
    BitxorX = (35, "bitxor")  ## 
    BitnotX = (36, "bitnot")  ## 
    EqX = (37, "eq")  ## 
    NeqX = (38, "neq")  ## 
    LeX = (39, "le")  ## 
    LtX = (40, "lt")  ## 
    CastX = (41, "cast")  ## 
    ConvX = (42, "conv")  ## type conversion
    CallX = (43, "call")  ## call operation
  NimonyStmt* = enum
    NoStmt
    VarS = (48, "var")  ## variable declaration
    ConstS = (50, "const")  ## const variable declaration
    ResultS = (51, "result")  ## result variable declaration
    LetS = (52, "let")  ## let variable declaration
    CursorS = (53, "cursor")  ## cursor variable declaration
    EmitS = (54, "emit")  ## emit statement
    AsgnS = (55, "asgn")  ## assignment statement
    ScopeS = (56, "scope")  ## explicit scope annotation, like `stmts`
    IfS = (57, "if")  ## if statement header
    BreakS = (60, "break")  ## `break` statement
    WhileS = (61, "while")  ## `while` statement
    CaseS = (62, "case")  ## `case` statement
    RetS = (66, "ret")  ## `return` instruction
    StmtsS = (67, "stmts")  ## list of statements
    ProcS = (69, "proc")  ## proc declaration
    TypeS = (89, "type")  ## `type` declaration statement
    DiscardS = (111, "discard")  ## `discard` statement
    TryS = (112, "try")  ## `try` statement
    RaiseS = (113, "raise")  ## `raise` statement
  NimonyType* = enum
    NoType
    ParamsT = (68, "params")  ## list of proc parameters, also used as a "proc type"
    ObjectT = (72, "object")  ## object type declaration
    EnumT = (74, "enum")  ## enum type declaration
    ProctypeT = (75, "proctype")  ## proc type declaration (soon obsolete, use params instead)
    IT = (79, "i")  ## `int` builtin type
    UT = (80, "u")  ## `uint` builtin type
    FT = (81, "f")  ## `float` builtin type
    CT = (82, "c")  ## `char` builtin type
    PtrT = (85, "ptr")  ## `ptr` type contructor
    ArrayT = (86, "array")  ## `array` type constructor
  NimonyOther* = enum
    NoSub
    KvU = (25, "kv")  ## key-value pair
    RangeU = (44, "range")  ## `(range a b)` construct
    RangesU = (45, "ranges")  ## 
    ParamU = (49, "param")  ## parameter declaration
    ElifU = (58, "elif")  ## pair of (condition, action)
    ElseU = (59, "else")  ## `else` action
    OfU = (63, "of")  ## `of` branch within a `case` statement
    FldU = (70, "fld")  ## field declaration
    EfldU = (73, "efld")  ## enum field declaration
    PragmasU = (104, "pragmas")  ## begin of pragma section
  NimonyPragma* = enum
    NoPragma
    InlineP = (98, "inline")  ## `inline` proc annotation
    NoinlineP = (99, "noinline")  ## `noinline` proc annotation
    VarargsP = (101, "varargs")  ## `varargs` proc annotation
    SelectanyP = (103, "selectany")  ## 
    NodeclP = (109, "nodecl")  ## `nodecl` annotation
    RaisesP = (115, "raises")  ## proc annotation
  NimonySym* = enum
    NoSym
    VarY = (48, "var")  ## variable declaration
    ParamY = (49, "param")  ## parameter declaration
    ConstY = (50, "const")  ## const variable declaration
    ResultY = (51, "result")  ## result variable declaration
    LetY = (52, "let")  ## let variable declaration
    CursorY = (53, "cursor")  ## cursor variable declaration
    ProcY = (69, "proc")  ## proc declaration
