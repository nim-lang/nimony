# Generated by tools/gen_tags.nim from doc/tags.md. DO NOT EDIT!


type
  NimonyExpr* = enum
    NoExpr
    ErrX = (1, "err")  ## indicates an error
    SufX = (2, "suf")  ## literal with suffix annotation
    AtX = (3, "at")  ## array indexing operation
    DerefX = (4, "deref")  ## pointer deref operation
    DotX = (5, "dot")  ## object field selection
    PatX = (6, "pat")  ## pointer indexing operation
    ParX = (7, "par")  ## syntactic parenthesis
    AddrX = (8, "addr")  ## address of operation
    NilX = (9, "nil")  ## nil pointer value
    InfX = (10, "inf")  ## positive infinity floating point value
    NeginfX = (11, "neginf")  ## negative infinity floating point value
    NanX = (12, "nan")  ## NaN floating point value
    FalseX = (13, "false")  ## boolean `false` value
    TrueX = (14, "true")  ## boolean `true` value
    AndX = (15, "and")  ## boolean `and` operation
    OrX = (16, "or")  ## boolean `or` operation
    XorX = (17, "xor")  ## boolean `xor` operation
    NotX = (18, "not")  ## boolean `not` operation
    NegX = (19, "neg")  ## negation operation
    SizeofX = (20, "sizeof")  ## `sizeof` operation
    AlignofX = (21, "alignof")  ## `alignof` operation
    OffsetofX = (22, "offsetof")  ## `offsetof` operation
    OconstrX = (23, "oconstr")  ## object constructor
    AconstrX = (24, "aconstr")  ## array constructor
    BracketX = (25, "bracket")  ## untyped array constructor
    CurlyX = (26, "curly")  ## untyped set constructor
    CurlyatX = (27, "curlyat")  ## curly expression `a{i}`
    AddX = (30, "add")
    SubX = (31, "sub")
    MulX = (32, "mul")
    DivX = (33, "div")
    ModX = (34, "mod")
    ShrX = (35, "shr")
    ShlX = (36, "shl")
    BitandX = (37, "bitand")
    BitorX = (38, "bitor")
    BitxorX = (39, "bitxor")
    BitnotX = (40, "bitnot")
    EqX = (41, "eq")
    NeqX = (42, "neq")
    LeX = (43, "le")
    LtX = (44, "lt")
    CastX = (45, "cast")  ## `cast` operation
    ConvX = (46, "conv")  ## type conversion
    CallX = (47, "call")  ## call operation
    CmdX = (48, "cmd")  ## command operation
    CchoiceX = (74, "cchoice")  ## closed choice
    OchoiceX = (75, "ochoice")  ## open choice
    PragmaxX = (130, "pragmax")  ## pragma expressions
    QuotedX = (206, "quoted")  ## name in backticks
    HderefX = (207, "hderef")  ## hidden pointer deref operation
    DdotX = (208, "ddot")  ## deref dot
    HaddrX = (209, "haddr")  ## hidden address of operation
    NewrefX = (210, "newref")  ## Nim's `new` magic proc that allocates a `ref T`
    NewobjX = (211, "newobj")  ## new object constructor
    TupX = (212, "tup")  ## untyped tuple constructor
    TupconstrX = (213, "tupconstr")  ## tuple constructor
    SetconstrX = (214, "setconstr")  ## set constructor
    TabconstrX = (215, "tabconstr")  ## table constructor
    AshrX = (216, "ashr")
    OconvX = (217, "oconv")  ## object conversion
    HconvX = (218, "hconv")  ## hidden basic type conversion
    DconvX = (219, "dconv")  ## conversion between `distinct` types
    CallstrlitX = (220, "callstrlit")
    InfixX = (221, "infix")
    PrefixX = (222, "prefix")
    HcallX = (223, "hcall")  ## hidden converter call
    CompilesX = (224, "compiles")
    DeclaredX = (225, "declared")
    DefinedX = (226, "defined")
    HighX = (227, "high")
    LowX = (228, "low")
    TypeofX = (229, "typeof")
    UnpackX = (230, "unpack")
    EnumtostrX = (231, "enumtostr")
    IsmainmoduleX = (232, "ismainmodule")
    DefaultobjX = (233, "defaultobj")
    DefaulttupX = (234, "defaulttup")
    ExprX = (235, "expr")
    DoX = (236, "do")  ## `do` expression
    ArratX = (237, "arrat")
    TupatX = (238, "tupat")
    PlussetX = (239, "plusset")
    MinussetX = (240, "minusset")
    MulsetX = (241, "mulset")
    XorsetX = (242, "xorset")
    EqsetX = (243, "eqset")
    LesetX = (244, "leset")
    LtsetX = (245, "ltset")
    InsetX = (246, "inset")
    CardX = (247, "card")
    EmoveX = (248, "emove")
    DestroyX = (249, "destroy")
    DupX = (250, "dup")
    CopyX = (251, "copy")
    WasmovedX = (252, "wasmoved")
    SinkhX = (253, "sinkh")
    TraceX = (254, "trace")

proc rawTagIsNimonyExpr*(raw: uint32): bool {.inline.} =
  let r = raw
  r <= 255'u32 and r.uint8 in {1'u8, 2'u8, 3'u8, 4'u8, 5'u8, 6'u8, 7'u8, 8'u8, 9'u8, 10'u8, 11'u8, 12'u8, 13'u8, 14'u8, 15'u8, 16'u8, 17'u8, 18'u8, 19'u8, 20'u8, 21'u8, 22'u8, 23'u8, 24'u8, 25'u8, 26'u8, 27'u8, 30'u8, 31'u8, 32'u8, 33'u8, 34'u8, 35'u8, 36'u8, 37'u8, 38'u8, 39'u8, 40'u8, 41'u8, 42'u8, 43'u8, 44'u8, 45'u8, 46'u8, 47'u8, 48'u8, 74'u8, 75'u8, 130'u8, 206'u8, 207'u8, 208'u8, 209'u8, 210'u8, 211'u8, 212'u8, 213'u8, 214'u8, 215'u8, 216'u8, 217'u8, 218'u8, 219'u8, 220'u8, 221'u8, 222'u8, 223'u8, 224'u8, 225'u8, 226'u8, 227'u8, 228'u8, 229'u8, 230'u8, 231'u8, 232'u8, 233'u8, 234'u8, 235'u8, 236'u8, 237'u8, 238'u8, 239'u8, 240'u8, 241'u8, 242'u8, 243'u8, 244'u8, 245'u8, 246'u8, 247'u8, 248'u8, 249'u8, 250'u8, 251'u8, 252'u8, 253'u8, 254'u8}

type
  NimonyStmt* = enum
    NoStmt
    CallS = (47, "call")  ## call operation
    CmdS = (48, "cmd")  ## command operation
    GvarS = (51, "gvar")  ## global variable declaration
    TvarS = (52, "tvar")  ## thread local variable declaration
    VarS = (53, "var")  ## variable declaration
    ConstS = (55, "const")  ## const variable declaration
    ResultS = (56, "result")  ## result variable declaration
    GletS = (57, "glet")  ## global let variable declaration
    TletS = (58, "tlet")  ## thread local let variable declaration
    LetS = (59, "let")  ## let variable declaration
    CursorS = (60, "cursor")  ## cursor variable declaration
    ProcS = (64, "proc")  ## proc declaration
    FuncS = (65, "func")  ## function declaration
    IteratorS = (66, "iterator")  ## iterator declaration
    ConverterS = (67, "converter")  ## converter declaration
    MethodS = (68, "method")  ## method declaration
    MacroS = (69, "macro")  ## macro declaration
    TemplateS = (70, "template")  ## template declaration
    TypeS = (71, "type")  ## type declaration
    BlockS = (72, "block")  ## block declaration
    EmitS = (76, "emit")  ## emit statement
    AsgnS = (77, "asgn")  ## assignment statement
    ScopeS = (78, "scope")  ## explicit scope annotation, like `stmts`
    IfS = (79, "if")  ## if statement header
    WhenS = (80, "when")  ## when statement header
    BreakS = (84, "break")  ## `break` statement
    ContinueS = (85, "continue")  ## `continue` statement
    ForS = (86, "for")  ## for statement
    WhileS = (87, "while")  ## `while` statement
    CaseS = (88, "case")  ## `case` statement
    RetS = (92, "ret")  ## `return` instruction
    YldS = (93, "yld")  ## yield statement
    StmtsS = (94, "stmts")  ## list of statements
    PragmasS = (129, "pragmas")  ## begin of pragma section
    InclS = (136, "incl")  ## `#include` statement or `incl` set operation
    ExclS = (137, "excl")  ## `excl` set operation
    IncludeS = (138, "include")  ## `include` statement
    ImportS = (139, "import")  ## `import` statement
    ImportasS = (140, "importas")  ## `import as` statement
    FromimportS = (141, "fromimport")  ## `from import` statement
    ImportexceptS = (142, "importexcept")  ## `importexcept` statement
    ExportS = (143, "export")  ## `export` statement
    ExportexceptS = (144, "exportexcept")  ## `exportexcept` statement
    CommentS = (145, "comment")  ## `comment` statement
    DiscardS = (146, "discard")  ## `discard` statement
    TryS = (147, "try")  ## `try` statement
    RaiseS = (148, "raise")  ## `raise` statement
    UnpackdeclS = (159, "unpackdecl")  ## unpack var/let/const declaration
    StaticstmtS = (256, "staticstmt")  ## `static` statement
    BindS = (257, "bind")  ## `bind` statement
    MixinS = (258, "mixin")  ## `mixin` statement
    UsingS = (259, "using")  ## `using` statement
    AsmS = (260, "asm")  ## `asm` statement
    DeferS = (261, "defer")  ## `defer` statement

proc rawTagIsNimonyStmt*(raw: uint32): bool {.inline.} =
  let r = raw - 47'u32
  r <= 255'u32 and r.uint8 in {0'u8, 1'u8, 4'u8, 5'u8, 6'u8, 8'u8, 9'u8, 10'u8, 11'u8, 12'u8, 13'u8, 17'u8, 18'u8, 19'u8, 20'u8, 21'u8, 22'u8, 23'u8, 24'u8, 25'u8, 29'u8, 30'u8, 31'u8, 32'u8, 33'u8, 37'u8, 38'u8, 39'u8, 40'u8, 41'u8, 45'u8, 46'u8, 47'u8, 82'u8, 89'u8, 90'u8, 91'u8, 92'u8, 93'u8, 94'u8, 95'u8, 96'u8, 97'u8, 98'u8, 99'u8, 100'u8, 101'u8, 112'u8, 209'u8, 210'u8, 211'u8, 212'u8, 213'u8, 214'u8}

type
  NimonyType* = enum
    NoType
    ErrT = (1, "err")  ## indicates an error
    AtT = (3, "at")  ## array indexing operation
    AndT = (15, "and")  ## boolean `and` operation
    OrT = (16, "or")  ## boolean `or` operation
    NotT = (18, "not")  ## boolean `not` operation
    IteratorT = (66, "iterator")  ## iterator declaration
    ParamsT = (95, "params")  ## list of proc parameters, also used as a "proc type"
    ObjectT = (97, "object")  ## object type declaration
    EnumT = (98, "enum")  ## enum type declaration
    ProctypeT = (99, "proctype")  ## proc type declaration (soon obsolete, use params instead)
    IT = (104, "i")  ## `int` builtin type
    UT = (105, "u")  ## `uint` builtin type
    FT = (106, "f")  ## `float` builtin type
    CT = (107, "c")  ## `char` builtin type
    BoolT = (108, "bool")  ## `bool` builtin type
    VoidT = (109, "void")  ## `void` return type
    PtrT = (110, "ptr")  ## `ptr` type contructor
    ArrayT = (111, "array")  ## `array` type constructor
    VarargsT = (126, "varargs")  ## `varargs` proc annotation
    StaticT = (152, "static")  ## `static` type or annotation
    TupleT = (162, "tuple")  ## `tuple` type
    OnumT = (163, "onum")  ## enum with holes type
    RefT = (164, "ref")  ## `ref` type
    MutT = (165, "mut")  ## `mut` type
    OutT = (166, "out")  ## `out` type
    LentT = (167, "lent")  ## `lent` type
    SinkT = (168, "sink")  ## `sink` type
    NiltT = (169, "nilt")  ## `nilt` type
    ConceptT = (170, "concept")  ## `concept` type
    DistinctT = (171, "distinct")  ## `distinct` type
    ItertypeT = (172, "itertype")  ## `itertype` type
    RangetypeT = (173, "rangetype")  ## `rangetype` type
    UarrayT = (174, "uarray")  ## `uarray` type
    SetT = (175, "set")  ## `set` type
    AutoT = (176, "auto")  ## `auto` type
    SymkindT = (177, "symkind")  ## `symkind` type
    TypekindT = (178, "typekind")  ## `typekind` type
    TypedescT = (179, "typedesc")  ## `typedesc` type
    UntypedT = (180, "untyped")  ## `untyped` type
    TypedT = (181, "typed")  ## `typed` type
    CstringT = (182, "cstring")  ## `cstring` type
    PointerT = (183, "pointer")  ## `pointer` type
    OrdinalT = (184, "ordinal")  ## `ordinal` type

proc rawTagIsNimonyType*(raw: uint32): bool {.inline.} =
  let r = raw
  r <= 255'u32 and r.uint8 in {1'u8, 3'u8, 15'u8, 16'u8, 18'u8, 66'u8, 95'u8, 97'u8, 98'u8, 99'u8, 104'u8, 105'u8, 106'u8, 107'u8, 108'u8, 109'u8, 110'u8, 111'u8, 126'u8, 152'u8, 162'u8, 163'u8, 164'u8, 165'u8, 166'u8, 167'u8, 168'u8, 169'u8, 170'u8, 171'u8, 172'u8, 173'u8, 174'u8, 175'u8, 176'u8, 177'u8, 178'u8, 179'u8, 180'u8, 181'u8, 182'u8, 183'u8, 184'u8}

type
  NimonyOther* = enum
    NoSub
    KvU = (28, "kv")  ## key-value pair
    VvU = (29, "vv")  ## value-value pair (used for explicitly named arguments in function calls)
    RangeU = (49, "range")  ## `(range a b)` construct
    RangesU = (50, "ranges")
    ParamU = (54, "param")  ## parameter declaration
    TypevarU = (61, "typevar")  ## type variable declaration
    EfldU = (62, "efld")  ## enum field declaration
    FldU = (63, "fld")  ## field declaration
    ElifU = (81, "elif")  ## pair of (condition, action)
    ElseU = (82, "else")  ## `else` action
    TypevarsU = (83, "typevars")  ## type variable/generic parameters
    OfU = (89, "of")  ## `of` branch within a `case` statement
    ParamsU = (95, "params")  ## list of proc parameters, also used as a "proc type"
    PragmasU = (129, "pragmas")  ## begin of pragma section
    UnpackflatU = (157, "unpackflat")  ## unpack into flat variable list
    UnpacktupU = (158, "unpacktup")  ## unpack tuple
    ExceptU = (160, "except")  ## except subsection
    FinU = (161, "fin")  ## finally subsection

proc rawTagIsNimonyOther*(raw: uint32): bool {.inline.} =
  let r = raw - 28'u32
  r <= 255'u32 and r.uint8 in {0'u8, 1'u8, 21'u8, 22'u8, 26'u8, 33'u8, 34'u8, 35'u8, 53'u8, 54'u8, 55'u8, 61'u8, 67'u8, 101'u8, 129'u8, 130'u8, 132'u8, 133'u8}

type
  NimonyPragma* = enum
    NoPragma
    EmitP = (76, "emit")  ## emit statement
    InlineP = (123, "inline")  ## `inline` proc annotation
    NoinlineP = (124, "noinline")  ## `noinline` proc annotation
    VarargsP = (126, "varargs")  ## `varargs` proc annotation
    SelectanyP = (128, "selectany")
    AlignP = (131, "align")
    BitsP = (132, "bits")
    NodeclP = (135, "nodecl")  ## `nodecl` annotation
    RaisesP = (150, "raises")  ## proc annotation
    UntypedP = (180, "untyped")  ## `untyped` type
    MagicP = (185, "magic")  ## `magic` pragma
    ImportcP = (186, "importc")  ## `importc` pragma
    ImportcppP = (187, "importcpp")  ## `importcpp` pragma
    ExportcP = (188, "exportc")  ## `exportc` pragma
    HeaderP = (189, "header")  ## `header` pragma
    ThreadvarP = (190, "threadvar")  ## `threadvar` pragma
    GlobalP = (191, "global")  ## `global` pragma
    DiscardableP = (192, "discardable")  ## `discardable` pragma
    NoreturnP = (193, "noreturn")  ## `noreturn` pragma
    BorrowP = (194, "borrow")  ## `borrow` pragma
    NoSideEffectP = (195, "noSideEffect")  ## `noSideEffect` pragma
    NodestroyP = (196, "nodestroy")  ## `nodestroy` pragma
    PluginP = (197, "plugin")  ## `plugin` pragma
    BycopyP = (198, "bycopy")  ## `bycopy` pragma
    ByrefP = (199, "byref")  ## `byref` pragma
    NoinitP = (200, "noinit")  ## `noinit` pragma
    RequiresP = (201, "requires")  ## `requires` pragma
    EnsuresP = (202, "ensures")  ## `ensures` pragma
    BuildP = (203, "build")  ## `build` pragma
    StringP = (204, "string")  ## `string` pragma
    ViewP = (205, "view")  ## `view` pragma
    InjectP = (265, "inject")  ## `inject` pragma
    GensymP = (266, "gensym")  ## `gensym` pragma
    ErrorP = (267, "error")  ## `error` pragma

proc rawTagIsNimonyPragma*(raw: uint32): bool {.inline.} =
  let r = raw - 76'u32
  r <= 255'u32 and r.uint8 in {0'u8, 47'u8, 48'u8, 50'u8, 52'u8, 55'u8, 56'u8, 59'u8, 74'u8, 104'u8, 109'u8, 110'u8, 111'u8, 112'u8, 113'u8, 114'u8, 115'u8, 116'u8, 117'u8, 118'u8, 119'u8, 120'u8, 121'u8, 122'u8, 123'u8, 124'u8, 125'u8, 126'u8, 127'u8, 128'u8, 129'u8, 189'u8, 190'u8, 191'u8}

type
  NimonySym* = enum
    NoSym
    GvarY = (51, "gvar")  ## global variable declaration
    TvarY = (52, "tvar")  ## thread local variable declaration
    VarY = (53, "var")  ## variable declaration
    ParamY = (54, "param")  ## parameter declaration
    ConstY = (55, "const")  ## const variable declaration
    ResultY = (56, "result")  ## result variable declaration
    GletY = (57, "glet")  ## global let variable declaration
    TletY = (58, "tlet")  ## thread local let variable declaration
    LetY = (59, "let")  ## let variable declaration
    CursorY = (60, "cursor")  ## cursor variable declaration
    TypevarY = (61, "typevar")  ## type variable declaration
    EfldY = (62, "efld")  ## enum field declaration
    FldY = (63, "fld")  ## field declaration
    ProcY = (64, "proc")  ## proc declaration
    FuncY = (65, "func")  ## function declaration
    IteratorY = (66, "iterator")  ## iterator declaration
    ConverterY = (67, "converter")  ## converter declaration
    MethodY = (68, "method")  ## method declaration
    MacroY = (69, "macro")  ## macro declaration
    TemplateY = (70, "template")  ## template declaration
    TypeY = (71, "type")  ## type declaration
    BlockY = (72, "block")  ## block declaration
    ModuleY = (73, "module")  ## module declaration
    CchoiceY = (74, "cchoice")  ## closed choice

proc rawTagIsNimonySym*(raw: uint32): bool {.inline.} =
  raw >= 51'u32 and raw <= 74'u32

type
  HookKind* = enum
    NoHook
    DestroyH = (249, "destroy")
    DupH = (250, "dup")
    CopyH = (251, "copy")
    WasmovedH = (252, "wasmoved")
    SinkhH = (253, "sinkh")
    TraceH = (254, "trace")

proc rawTagIsHookKind*(raw: uint32): bool {.inline.} =
  raw >= 249'u32 and raw <= 254'u32

type
  ControlFlowKind* = enum
    NoControlFlow
    IteF = (153, "ite")  ## if-then-else
    GraphF = (154, "graph")  ## disjoint subgraph annotation
    ForbindF = (155, "forbind")  ## bindings for a `for` loop but the loop itself is mapped to gotos
    KillF = (156, "kill")  ## some.var is about to disappear (scope exit)

proc rawTagIsControlFlowKind*(raw: uint32): bool {.inline.} =
  raw >= 153'u32 and raw <= 156'u32

