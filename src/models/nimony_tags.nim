# Generated by tools/gen_tags.nim from doc/tags.md. DO NOT EDIT!

type
  NimonyExpr* = enum
    NoExpr
    ErrX = (1, "err")  ## indicates an error
    SufX = (2, "suf")  ## literal with suffix annotation
    AtX = (3, "at")  ## array indexing operation
    DerefX = (4, "deref")  ## pointer deref operation
    DotX = (5, "dot")  ## object field selection
    PatX = (6, "pat")  ## pointer indexing operation
    ParX = (7, "par")  ## syntactic parenthesis
    AddrX = (8, "addr")  ## address of operation
    NilX = (9, "nil")  ## nil pointer value
    InfX = (10, "inf")  ## positive infinity floating point value
    NeginfX = (11, "neginf")  ## negative infinity floating point value
    NanX = (12, "nan")  ## NaN floating point value
    FalseX = (13, "false")  ## boolean `false` value
    TrueX = (14, "true")  ## boolean `true` value
    AndX = (15, "and")  ## boolean `and` operation
    OrX = (16, "or")  ## boolean `or` operation
    NotX = (17, "not")  ## boolean `not` operation
    NegX = (18, "neg")  ## negation operation
    SizeofX = (19, "sizeof")  ## `sizeof` operation
    AlignofX = (20, "alignof")  ## `alignof` operation
    OffsetofX = (21, "offsetof")  ## `offsetof` operation
    OconstrX = (22, "oconstr")  ## object constructor
    AconstrX = (23, "aconstr")  ## array constructor
    AddX = (25, "add")  ##
    SubX = (26, "sub")  ##
    MulX = (27, "mul")  ##
    DivX = (28, "div")  ##
    ModX = (29, "mod")  ##
    ShrX = (30, "shr")  ##
    ShlX = (31, "shl")  ##
    BitandX = (32, "bitand")  ##
    BitorX = (33, "bitor")  ##
    BitxorX = (34, "bitxor")  ##
    BitnotX = (35, "bitnot")  ##
    EqX = (36, "eq")  ##
    NeqX = (37, "neq")  ##
    LeX = (38, "le")  ##
    LtX = (39, "lt")  ##
    CastX = (40, "cast")  ##
    ConvX = (41, "conv")  ## type conversion
    CallX = (42, "call")  ## call operation
  NimonyStmt* = enum
    NoStmt
    VarS = (47, "var")  ## variable declaration
    ConstS = (49, "const")  ## const variable declaration
    ResultS = (50, "result")  ## result variable declaration
    LetS = (51, "let")  ## let variable declaration
    CursorS = (52, "cursor")  ## cursor variable declaration
    EmitS = (53, "emit")  ## emit statement
    AsgnS = (54, "asgn")  ## assignment statement
    ScopeS = (55, "scope")  ## explicit scope annotation, like `stmts`
    IfS = (56, "if")  ## if statement header
    BreakS = (59, "break")  ## `break` statement
    WhileS = (60, "while")  ## `while` statement
    CaseS = (61, "case")  ## `case` statement
    RetS = (65, "ret")  ## `return` instruction
    StmtsS = (66, "stmts")  ## list of statements
    ProcS = (68, "proc")  ## proc declaration
    TypeS = (88, "type")  ## `type` declaration statement
    DiscardS = (110, "discard")  ## `discard` statement
    TryS = (111, "try")  ## `try` statement
    RaiseS = (112, "raise")  ## `raise` statement
  NimonyType* = enum
    NoType
    ParamsT = (67, "params")  ## list of proc parameters, also used as a "proc type"
    ObjectT = (71, "object")  ## object type declaration
    EnumT = (73, "enum")  ## enum type declaration
    ProctypeT = (74, "proctype")  ## proc type declaration (soon obsolete, use params instead)
    IT = (78, "i")  ## `int` builtin type
    UT = (79, "u")  ## `uint` builtin type
    FT = (80, "f")  ## `float` builtin type
    CT = (81, "c")  ## `char` builtin type
    PtrT = (84, "ptr")  ## `ptr` type contructor
    ArrayT = (85, "array")  ## `array` type constructor
  NimonyOther* = enum
    NoSub
    KvU = (24, "kv")  ## key-value pair
    RangeU = (43, "range")  ## `(range a b)` construct
    RangesU = (44, "ranges")  ##
    ParamU = (48, "param")  ## parameter declaration
    ElifU = (57, "elif")  ## pair of (condition, action)
    ElseU = (58, "else")  ## `else` action
    OfU = (62, "of")  ## `of` branch within a `case` statement
    FldU = (69, "fld")  ## field declaration
    EfldU = (72, "efld")  ## enum field declaration
    PragmasU = (103, "pragmas")  ## begin of pragma section
  NimonyPragma* = enum
    NoPragma
    InlineP = (97, "inline")  ## `inline` proc annotation
    NoinlineP = (98, "noinline")  ## `noinline` proc annotation
    VarargsP = (100, "varargs")  ## `varargs` proc annotation
    SelectanyP = (102, "selectany")  ##
    NodeclP = (108, "nodecl")  ## `nodecl` annotation
    RaisesP = (114, "raises")  ## proc annotation
  NimonySym* = enum
    NoSym
    VarY = (47, "var")  ## variable declaration
    ParamY = (48, "param")  ## parameter declaration
    ConstY = (49, "const")  ## const variable declaration
    ResultY = (50, "result")  ## result variable declaration
    LetY = (51, "let")  ## let variable declaration
    CursorY = (52, "cursor")  ## cursor variable declaration
    ProcY = (68, "proc")  ## proc declaration
